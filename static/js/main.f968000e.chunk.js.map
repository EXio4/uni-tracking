{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["rawData","map","x","e","passed","regular","getEstado","id","findIndex","i","requirements","find","works","every","console","log","defaultData","nodes","name","color","links","flatMap","source","target","myConfig","height","width","directed","nodeHighlightBehavior","node","symbolType","size","fontColor","highlightStrokeColor","labelProperty","link","highlightColor","d3","gravity","linkLength","linkStrength","App","react_default","a","createElement","style","display","alignItems","justifyContent","background","border","lib","data","config","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f968000e.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Graph } from 'react-d3-graph';\n\n\n// [mostly] raw data from the page\n// gathered through JSON.stringify(Array.from(document.getElementsByTagName('tr')).filter((x) => x.children.length == 6).map((x) => Array.from(x.children)).map((x) => [x[0], x[1], x[5]].map(e => e.children[0].childNodes[0].data)).filter((x) => typeof x[0] !== 'undefined').map(x => [x[0], x[1], !x[2] ? [] : x[2].split(/ [–-] /)]))\nconst rawData = [\n  [\"340101\",\"Sistemas y Organizaciones\", []],\n  [\"340102\",\"Fundamentos de Programación\", []],\n  [\"340103\",\"Cálculo Diferencial e Integral\",[]],\n  [\"340104\",\"Lógica y Álgebra\",[]],\n  [\"340105\",\"Lecto-Comprensión en Inglés\",[]],\n  [\"340106\",\"Derechos Humanos y Tecnología\",[]],\n  [\"340107\",\"Fundamentos de Computación\",[]],\n  [\"340208\",\"Ingeniería de Software I\",[\"101\",\"102\"]],\n  [\"340209\",\"Algoritmos y Estructuras de Datos\",[\"102\",\"104\"]],\n  [\"340210\",\"Programación Orientada a Objetos\",[\"102\",\"105\",\"107\"]],\n  [\"340211\",\"Matemática Discreta\",[\"104\"]],\n  [\"340212\",\"Ecuaciones Diferenciales y Cálculo Multivariado\",[\"103\"]],\n  [\"340213\",\"Arquitectura de Computadoras\",[\"102\",\"107\"]],\n  [\"340314\",\"Ingeniería de Software II\",[\"208\",\"209\",\"210\"]],\n  [\"340315\",\"Bases de Datos\",[\"209\",\"210\",\"211\"]],\n  [\"340316\",\"Sistemas Operativos\",[\"209\",\"211\",\"213\"]],\n  [\"340317\",\"Probabilidad y Estadística\",[\"211\",\"212\"]],\n  [\"340318\",\"Paradigmas y Lenguajes\",[\"209\",\"210\",\"213\"]],\n  [\"340319\",\"Ética Profesional\",[\"106\",\"208\"]],\n  [\"340320\",\"Programación Avanzada\",[\"209\",\"210\"]],\n  [\"340321\",\"Taller de Integración\",[\"314\",\"315\", \"316\", \"317\", \"318\", \"319\",\"320\"]], // hack\n  [\"340422\",\"Inteligencia Artificial\",[\"315\",\"317\",\"318\"]],\n  [\"340423\",\"Bases de Datos Avanzadas\",[\"315\",\"320\"]],\n  [\"340424\",\"Comunicaciones y Redes\",[\"316\",\"317\"]],\n  [\"340425\",\"Metodología de la Investigación\",[\"208\",\"317\"]],\n  [\"340426\",\"Investigación Operativa\",[\"317\"]],\n  [\"340427\",\"Optativa 1\",[\"314\",\"315\",\"320\",\"321\"]],\n  [\"340428\",\"Computación Avanzada\",[\"315\",\"316\"]],\n  [\"340429\",\"Optativa 2\",[\"316\",\"318\",\"320\"]],\n  [\"340530\",\"Seguridad y Auditoria\",[\"319\",\"424\"]],\n  [\"340531\",\"Administración de Recursos\",[\"423\",\"424\"]],\n  [\"340532\",\"Teoría de Computabilidad\",[\"318\",\"423\",\"424\"]],\n  [\"340533\",\"Tesina de Grado\", [\"530\",\"531\", \"532\", \"534\"]], // hack\n  [\"340534\",\"Interfaz Hombre Máquina\",[\"320\",\"428\"]],\n  [\"340535\",\"Optativa 3\",[\"423\"]]\n].map(x => [x[0], x[1], x[2].map(e => '340'+e)]);\n\nconst passed = [\n  101, 102, 103, 104, 105, 106, 107,\n  208, 209, 210, 211, 212, 213,\n  314, 315, 316, 317, 318, 319, 320,\n  423, 426\n].map((x) => '340'+x)\n\nconst regular = [\n  424, 428, \n].map((x) => '340'+x)\n\n\nconst partialPass = (id) => {\n  return (passed.findIndex((i) => i===id) !== -1) || (regular.findIndex((i) => i===id) !== -1)\n}\n\nconst getEstado = (id) => {\n  if (passed.findIndex((i) => i===id) !== -1) {\n    return 'blue'\n  } else if (regular.findIndex((i) => i===id) !== -1) {\n    return 'green'\n  } else {\n    const requirements = rawData.find(x => x[0] === id)\n    const works = requirements[2].every((x) => partialPass(x))\n    console.log(id, requirements, works)\n    if (works) {\n      return 'orange'\n    } else {\n      return 'red'\n    }\n  }\n}\n\n// graph payload (with minimalist structure)\nconst defaultData = {\n  nodes: rawData.map((x) => ({\n    id: x[0],\n    name: x[1],\n    color: getEstado(x[0])\n  })),\n  links: rawData.flatMap((x) => x[2].map((e) => ({\n    source: e,\n    target: x[0]\n  })))\n};\n\n// the graph configuration, you only need to pass down properties\n// that you want to override, otherwise default ones will be used\nconst myConfig = {\n  height: 600 * 1.75,\n  width: 1024 * 1.75,\n  directed: true,\n  nodeHighlightBehavior: true,\n  node: {\n      symbolType: 'diamond',\n      size: 120,\n      fontColor: '#ffa022',\n      highlightStrokeColor: 'white',\n      labelProperty: 'name',\n  },\n  link: {\n      color: '#616',\n      highlightColor: 'lightblue',\n  },\n  d3: {\n    gravity: -400,\n    linkLength: 200,\n    linkStrength: 0.5,\n  }\n};\n\nclass App extends Component {\n  render() {\n    return (\n      <div style={{\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        height: '100vh',\n        background: '#222',\n      }}>\n        <div style={{\n          border: '1px solid #d32461',\n        }}>\n          <Graph\n              id='graph-id' // id is mandatory, if no id is defined rd3g will throw an error\n              data={defaultData}\n              config={myConfig}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}